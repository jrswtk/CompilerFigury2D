
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Nov 05 13:06:26 CET 2016
//----------------------------------------------------

package parser;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sat Nov 05 13:06:26 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\003\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\007\005\000" +
    "\002\010\003\000\002\010\004\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\005\000\002\013" +
    "\024\000\002\013\020\000\002\013\016\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\016\005\000" +
    "\002\017\005\000\002\015\007\000\002\015\007\000\002" +
    "\015\007\000\002\015\007\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\010\002\ufffe\012\007\017\006\001\002\000" +
    "\004\002\121\001\002\000\004\014\120\001\002\000\014" +
    "\013\033\017\006\025\034\026\021\030\027\001\002\000" +
    "\004\015\011\001\002\000\004\017\006\001\002\000\004" +
    "\030\013\001\002\000\004\017\ufffd\001\002\000\006\006" +
    "\ufffa\017\ufffa\001\002\000\006\006\015\017\ufffb\001\002" +
    "\000\004\030\013\001\002\000\004\017\ufffc\001\002\000" +
    "\004\014\020\001\002\000\004\002\001\001\002\000\004" +
    "\007\036\001\002\000\016\013\ufff8\017\ufff8\020\ufff8\025" +
    "\ufff8\026\ufff8\030\ufff8\001\002\000\016\013\uffee\017\uffee" +
    "\020\uffee\025\uffee\026\uffee\030\uffee\001\002\000\016\013" +
    "\ufff4\017\ufff4\020\ufff4\025\ufff4\026\ufff4\030\ufff4\001\002" +
    "\000\016\013\ufff6\017\ufff6\020\ufff6\025\ufff6\026\ufff6\030" +
    "\ufff6\001\002\000\016\013\uffed\017\uffed\020\uffed\025\uffed" +
    "\026\uffed\030\uffed\001\002\000\004\016\114\001\002\000" +
    "\016\013\ufff5\017\ufff5\020\ufff5\025\ufff5\026\ufff5\030\ufff5" +
    "\001\002\000\016\013\033\017\006\020\113\025\034\026" +
    "\021\030\027\001\002\000\016\013\uffef\017\uffef\020\uffef" +
    "\025\uffef\026\uffef\030\uffef\001\002\000\004\007\067\001" +
    "\002\000\004\007\036\001\002\000\014\013\033\017\006" +
    "\025\034\026\021\030\027\001\002\000\010\011\041\027" +
    "\040\030\037\001\002\000\036\004\uffe2\005\uffe2\006\uffe2" +
    "\010\uffe2\013\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\001\002\000\036" +
    "\004\uffe3\005\uffe3\006\uffe3\010\uffe3\013\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\030\uffe3\001\002\000\004\030\064\001\002\000\036\004" +
    "\uffe4\005\uffe4\006\uffe4\010\uffe4\013\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030" +
    "\uffe4\001\002\000\016\004\047\005\050\021\046\022\045" +
    "\023\051\024\044\001\002\000\010\011\041\027\040\030" +
    "\037\001\002\000\010\011\041\027\040\030\037\001\002" +
    "\000\010\011\041\027\040\030\037\001\002\000\010\011" +
    "\041\027\040\030\037\001\002\000\010\011\041\027\040" +
    "\030\037\001\002\000\010\011\041\027\040\030\037\001" +
    "\002\000\010\004\047\005\050\010\053\001\002\000\014" +
    "\013\uffe9\017\uffe9\025\uffe9\026\uffe9\030\uffe9\001\002\000" +
    "\036\004\uffe5\005\uffe5\006\uffe5\010\uffe5\013\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\030\uffe5\001\002\000\036\004\uffe6\005\uffe6\006\uffe6" +
    "\010\uffe6\013\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\001\002\000\010" +
    "\004\047\005\050\010\057\001\002\000\014\013\uffea\017" +
    "\uffea\025\uffea\026\uffea\030\uffea\001\002\000\010\004\047" +
    "\005\050\010\061\001\002\000\014\013\uffe7\017\uffe7\025" +
    "\uffe7\026\uffe7\030\uffe7\001\002\000\010\004\047\005\050" +
    "\010\063\001\002\000\014\013\uffe8\017\uffe8\025\uffe8\026" +
    "\uffe8\030\uffe8\001\002\000\004\011\065\001\002\000\036" +
    "\004\uffe1\005\uffe1\006\uffe1\010\uffe1\013\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\030\uffe1\001\002\000\016\013\uffec\017\uffec\020\uffec\025" +
    "\uffec\026\uffec\030\uffec\001\002\000\010\011\041\027\040" +
    "\030\037\001\002\000\010\004\047\005\050\006\071\001" +
    "\002\000\010\011\041\027\040\030\037\001\002\000\010" +
    "\004\047\005\050\006\073\001\002\000\010\011\041\027" +
    "\040\030\037\001\002\000\010\004\047\005\050\006\075" +
    "\001\002\000\010\011\041\027\040\030\037\001\002\000" +
    "\010\004\047\005\050\006\077\001\002\000\010\011\041" +
    "\027\040\030\037\001\002\000\012\004\047\005\050\006" +
    "\102\010\101\001\002\000\016\013\ufff0\017\ufff0\020\ufff0" +
    "\025\ufff0\026\ufff0\030\ufff0\001\002\000\010\011\041\027" +
    "\040\030\037\001\002\000\012\004\047\005\050\006\105" +
    "\010\104\001\002\000\016\013\ufff1\017\ufff1\020\ufff1\025" +
    "\ufff1\026\ufff1\030\ufff1\001\002\000\010\011\041\027\040" +
    "\030\037\001\002\000\010\004\047\005\050\006\107\001" +
    "\002\000\010\011\041\027\040\030\037\001\002\000\010" +
    "\004\047\005\050\010\111\001\002\000\016\013\ufff2\017" +
    "\ufff2\020\ufff2\025\ufff2\026\ufff2\030\ufff2\001\002\000\016" +
    "\013\ufff7\017\ufff7\020\ufff7\025\ufff7\026\ufff7\030\ufff7\001" +
    "\002\000\020\013\ufff9\014\ufff9\017\ufff9\020\ufff9\025\ufff9" +
    "\026\ufff9\030\ufff9\001\002\000\010\011\041\027\040\030" +
    "\037\001\002\000\022\004\047\005\050\013\ufff3\017\ufff3" +
    "\020\ufff3\025\ufff3\026\ufff3\030\ufff3\001\002\000\014\013" +
    "\033\017\006\025\034\026\021\030\027\001\002\000\016" +
    "\013\uffeb\017\uffeb\020\uffeb\025\uffeb\026\uffeb\030\uffeb\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\006\003\003\007\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\025\010\030\011\021" +
    "\012\024\013\027\014\023\016\031\017\022\001\001\000" +
    "\004\004\007\001\001\000\004\007\016\001\001\000\006" +
    "\005\011\006\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\015\006\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\025\011\111" +
    "\012\024\013\027\014\023\016\031\017\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\034\001\001" +
    "\000\020\007\025\011\065\012\024\013\027\014\023\016" +
    "\031\017\022\001\001\000\006\020\042\021\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\061\021\041" +
    "\001\001\000\006\020\057\021\041\001\001\000\006\020" +
    "\055\021\041\001\001\000\004\021\054\001\001\000\004" +
    "\021\053\001\001\000\006\020\051\021\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\067\021\041\001\001\000\002\001\001\000\006" +
    "\020\071\021\041\001\001\000\002\001\001\000\006\020" +
    "\073\021\041\001\001\000\002\001\001\000\006\020\075" +
    "\021\041\001\001\000\002\001\001\000\006\020\077\021" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\102\021\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\105\021\041\001\001\000\002\001\001" +
    "\000\006\020\107\021\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\114\021\041\001\001\000\002\001\001\000\020\007" +
    "\025\011\116\012\024\013\027\014\023\016\031\017\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

    ListaZmiennych listaZmiennych = new ListaZmiennych();


    //-------------------------------------------


    public void syntax_error(Symbol token)
    {     
      report_error("Blad skladniowy ",token);
    }


    public void report_error(String message, Object info) 
    {           
        StringBuffer m = new StringBuffer(message);              
                            
        if (info instanceof java_cup.runtime.Symbol)
        {            
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

            if (s.left >= 0) 
            {
                m.append(" w wierszu "+(s.left+1));
                if (s.right>=0) m.append(" w kolumnie "+(s.right+1));
            }                
        }
        
        System.err.println("BLAD "+m);
    }
   

    public void report_fatal_error(String message, Object info) 
    {
        report_error("KRYTYCZNY "+message, info);
        System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // skladnik ::= APOSTROF ID APOSTROF 
            {
              TSkladnik RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TSkladnik(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*skladnik*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // skladnik ::= ID 
            {
              TSkladnik RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TSkladnik(s,parser.listaZmiennych); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*skladnik*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // skladnik ::= LICZBA 
            {
              TSkladnik RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TSkladnik(l); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*skladnik*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // wyrazenie ::= skladnik 
            {
              TWyrazenie RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TSkladnik s = (TSkladnik)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new TWyrazenie(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*wyrazenie*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // wyrazenie ::= wyrazenie MINUS skladnik 
            {
              TWyrazenie RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TWyrazenie w = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TSkladnik s = (TSkladnik)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TWyrazenie("MINUS",w,s); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*wyrazenie*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // wyrazenie ::= wyrazenie PLUS skladnik 
            {
              TWyrazenie RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TWyrazenie w = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TSkladnik s = (TSkladnik)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TWyrazenie("PLUS",w,s); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*wyrazenie*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // warunek ::= LNAWIAS wyrazenie NIEROWNE wyrazenie PNAWIAS 
            {
              TWarunek RESULT = null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TWyrazenie wl = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TWyrazenie wr = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TWarunek("NIEROWNE",wl,wr); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*warunek*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // warunek ::= LNAWIAS wyrazenie MNIEJSZE wyrazenie PNAWIAS 
            {
              TWarunek RESULT = null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TWyrazenie wl = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TWyrazenie wr = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TWarunek("MNIEJSZE",wl,wr); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*warunek*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // warunek ::= LNAWIAS wyrazenie WIEKSZE wyrazenie PNAWIAS 
            {
              TWarunek RESULT = null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TWyrazenie wl = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TWyrazenie wr = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TWarunek("WIEKSZE",wl,wr); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*warunek*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // warunek ::= LNAWIAS wyrazenie ROWNE wyrazenie PNAWIAS 
            {
              TWarunek RESULT = null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TWyrazenie wl = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TWyrazenie wr = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TWarunek("ROWNE",wl,wr); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*warunek*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // petla ::= PETLA warunek instrukcja 
            {
              TPetla RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TWarunek w = (TWarunek)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TInstrukcja i = (TInstrukcja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TPetla(w,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*petla*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // warunkowa ::= JESLI warunek instrukcja 
            {
              TWarunkowa RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TWarunek w = (TWarunek)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TInstrukcja i = (TInstrukcja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TWarunkowa(w,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*warunkowa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // zlozona_instrukcja ::= blok 
            {
              TZlozonaInstrukcja RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TBlok b = (TBlok)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TZlozonaInstrukcja(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*zlozona_instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // zlozona_instrukcja ::= petla 
            {
              TZlozonaInstrukcja RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TPetla p = (TPetla)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TZlozonaInstrukcja(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*zlozona_instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // zlozona_instrukcja ::= warunkowa 
            {
              TZlozonaInstrukcja RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TWarunkowa w = (TWarunkowa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TZlozonaInstrukcja(w); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*zlozona_instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // graficzna_instrukcja ::= RYSUJ LNAWIAS wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PNAWIAS 
            {
              TGraficznaInstrukcja RESULT = null;
		int w1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		TWyrazenie w1 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TWyrazenie w2 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TWyrazenie w3 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int w4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int w4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TWyrazenie w4 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int w5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int w5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TWyrazenie w5 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TGraficznaInstrukcja(w1,w2,w3,w4,w5,parser.listaZmiennych); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*graficzna_instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // graficzna_instrukcja ::= RYSUJ LNAWIAS wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PNAWIAS 
            {
              TGraficznaInstrukcja RESULT = null;
		int w1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		TWyrazenie w1 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		TWyrazenie w2 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TWyrazenie w3 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int w4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int w4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TWyrazenie w4 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int w5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int w5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TWyrazenie w5 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int w6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int w6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TWyrazenie w6 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TGraficznaInstrukcja(w1,w2,w3,w4,w5,w6,parser.listaZmiennych); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*graficzna_instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graficzna_instrukcja ::= RYSUJ LNAWIAS wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PRZECINEK wyrazenie PNAWIAS 
            {
              TGraficznaInstrukcja RESULT = null;
		int w1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		TWyrazenie w1 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		TWyrazenie w2 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		TWyrazenie w3 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int w4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int w4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		TWyrazenie w4 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int w5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int w5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TWyrazenie w5 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int w6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int w6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TWyrazenie w6 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int w7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int w7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TWyrazenie w7 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int w8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int w8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TWyrazenie w8 = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TGraficznaInstrukcja(w1,w2,w3,w4,w5,w6,w7,w8,parser.listaZmiennych); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*graficzna_instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // prosta_instrukcja ::= ID PRZYPISZ wyrazenie 
            {
              TProstaInstrukcja RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TWyrazenie w = (TWyrazenie)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TProstaInstrukcja(i,w,parser.listaZmiennych); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*prosta_instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrukcja ::= zlozona_instrukcja 
            {
              TInstrukcja RESULT = null;
		int zileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ziright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TZlozonaInstrukcja zi = (TZlozonaInstrukcja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TInstrukcja(zi); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrukcja ::= graficzna_instrukcja 
            {
              TInstrukcja RESULT = null;
		int gileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int giright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TGraficznaInstrukcja gi = (TGraficznaInstrukcja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TInstrukcja(gi); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrukcja ::= prosta_instrukcja 
            {
              TInstrukcja RESULT = null;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TProstaInstrukcja pi = (TProstaInstrukcja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TInstrukcja(pi); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instrukcja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sekwencja_instrukcji ::= sekwencja_instrukcji instrukcja 
            {
              TSekwencjaInstrukcji RESULT = null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSekwencjaInstrukcji si = (TSekwencjaInstrukcji)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TInstrukcja i = (TInstrukcja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TSekwencjaInstrukcji(si,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*sekwencja_instrukcji*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sekwencja_instrukcji ::= instrukcja 
            {
              TSekwencjaInstrukcji RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TInstrukcja i = (TInstrukcja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TSekwencjaInstrukcji(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*sekwencja_instrukcji*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // blok ::= LKLAMRA sekwencja_instrukcji PKLAMRA 
            {
              TBlok RESULT = null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSekwencjaInstrukcji si = (TSekwencjaInstrukcji)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TBlok(si); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*blok*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // zmienna ::= ID 
            {
              TZmienna RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TZmienna(i,parser.listaZmiennych); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*zmienna*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // zmienne ::= zmienna 
            {
              TZmienne RESULT = null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TZmienna z = (TZmienna)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TZmienne(z,parser.listaZmiennych); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*zmienne*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // zmienne ::= zmienna PRZECINEK zmienne 
            {
              TZmienne RESULT = null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TZmienna z = (TZmienna)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TZmienne zm = (TZmienne)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TZmienne(z,zm,parser.listaZmiennych); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*zmienne*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // deklaracja ::= ZMIENNE zmienne 
            {
              TDeklaracja RESULT = null;
		int zmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TZmienne zm = (TZmienne)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TDeklaracja(zm); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*deklaracja*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              TProgram RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= blok KONIEC 
            {
              TProgram RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TBlok b = (TBlok)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TProgram(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TProgram start_val = (TProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= START deklaracja blok KONIEC 
            {
              TProgram RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TDeklaracja d = (TDeklaracja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TBlok b = (TBlok)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TProgram(d,b); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

